DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS swindow;
DROP TABLE IF EXISTS interval;
DROP TABLE IF EXISTS swNotification;
DROP TABLE IF EXISTS notificationType;
DROP TABLE IF EXISTS swStatistics;

CREATE TABLE user (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username NVARCHAR(25) UNIQUE NOT NULL,
  password NVARCHAR(100) NOT NULL, -- WE SHOULD CHANGE TO BINARY(64) WHEN WE IMPLEMENT THE SECURE PASSWORD STORING
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
);

CREATE TABLE swindow (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name NVARCHAR(30) NOT NULL,
  openDirection INTEGER NOT NULL DEFAULT 0,
  openAngle FLOAT(2) NOT NULL DEFAULT 0,
  integrity FLOAT(2) NOT NULL DEFAULT 100,
  userID INTEGER NOT NULL,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (userID) REFERENCES user(id)
);

CREATE TABLE interval (
  id INTEGER PRIMARY KEY AUTO_INCREMENT,
  name NVARCHAR(20),
  windowID INTEGER NOT NULL,
  iStart TIMESTAMP NOT NULL,
  iEnd TIMESTAMP NOT NULL,
  luminosity FLOAT(2),
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (windowID) REFERENCES swindow(id),
  CHECK(iStart <= iEnd);
);

CREATE TABLE swNotification (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  windowID INTEGER NOT NULL,
  content NVARCHAR(255) NOT NULL,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (windowID) REFERENCES swindow(id)
);

CREATE TABLE notificationType (
  id INTEGER PRIMARY KEY AUTO_INCREMENT,
  description NVARCHAR(255) NOT NULL,
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE swStatistics (
  id INTEGER PRIMARY KEY AUTO_INCREMENT,
  windowID INTEGER NOT NULL,
  is_exterior boolean,
  min_temperature FLOAT(2),
  max_temperature FLOAT(2),
  humidity FLOAT(2),
  pressure FLOAT(2),
  createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  OREIGN KEY (windowID) REFERENCES swindow(id)
);
